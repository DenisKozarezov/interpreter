/*
  This example shows, how interpreter can handle invalid syntax errors. Let's see, what happens,
  if we try to parse such program.
*/

// let invalidReturn = return xyz;
let invalidReturn = return xyz; // this is not correct: function, constant or variable must be assigned
let validReturn = fn() { return xyz; } // correct

/* comment */
/*
comment
*/

// comment // comment // comment
if 5 == 5 { } // not correct, parentheses are missed - only `(5 == 5)` is correct

/*
  Also interpreter must show errors in result correctly, even if they have huge whitespaces like this:
*/
             if true { } // is it far enough?
                                 if false { } // still not far enough? huh?

/* Output after parsing is shown below:
Started to parse an input...
â›” Found 10 syntax error(s):
        1. [line: 7; pos: 30] parse error: no prefix parse function found for token 'return' [35]
        2. [line: 16; pos: 4] parse error: expected token type [23] but got [2]
        3. [line: 16; pos: 13] parse error: no prefix parse function found for token '{' [25]
        4. [line: 21; pos: 15] parse error: no prefix parse function found for token '}' [26]
        5. [line: 21; pos: 20] parse error: expected token type [23] but got [31]
        6. [line: 21; pos: 24] parse error: no prefix parse function found for token '{' [25]
        7. [line: 22; pos: 35] parse error: no prefix parse function found for token '}' [26]
        8. [line: 22; pos: 41] parse error: expected token type [23] but got [32]
        9. [line: 22; pos: 45] parse error: no prefix parse function found for token '{' [25]
        10. [line: 22; pos: 75] parse error: no prefix parse function found for token '}' [26]
Parser error found! Stopping the interpreter...
*/